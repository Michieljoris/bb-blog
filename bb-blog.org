* concerns:
** create pages using json
** create fake articles using some text generator for testing
** three use cases:
*** firstdoor/angular
    
*** client routing
   Build tree and tag index on client.
 
*** fully static blog site
A page for every article,  plus update tree and tag fragments/templates.
Plus every page tha
    
    
** pages with always paginated?
 
* --------------------
* recipes:
post, possibly for tag, archive, month, year

All partials embedded get a identifiable comment on top that can be used on the
client to refer to the partial, for example when saving the partial's edited
content. Only divs with class="editable" are editable..
So in #main we can embed a post or tag/month/year teaser list, or an archive
tree, however to use just ids for the dynamic contant in recipe we need a
slighty different recipe using different html, namely one that has the
class="editable" on the #main div, where the id is embedded.

  Editable text partials have their name in html comment above it.
  Used by client as the path to save the file under server.com/article1?path=editable/article1);
  Added by htmlbuilder because that's where the partial comes from (eg
  editable/article1.html) when building the template it's in
  
* new post?
Insert empty post in unpublished folder, no tags, unique title (possibly from
client), title is only allowed when not in flat list of the posts/ folder

* pagination?
group of teasers with links to other pages with more teasers
always paginate? 

* unpublished posts?
  just marked as unpublished in their meta, just don't create the pages in www/post
  for the unpublished posts
* rebuilding paginated page?
 Just add the teaser to the page, split page when getting too long, also then
 redo page befor and after to update next and previous links
* comments?
Just add disqus script tag to post page

* metadata in text fragment on top, crossed out 
 or some other way where it is easy to parse, and easy to hide through css 
 depends on online editor used a little bit..
 
* ---------------------------
* file structure on server?
*** basePath/ /in build dir of site, set in bb-blog.init
- recipe.js //recipes passed into bb-blog
- list-recipe.js
- tag-recipe.js
**** post //path set in init of bb-blog
- Title of post one.html //dynamically discovered by bb-blog
- Title of post two.html
- Title of post three.html
** bb-blog uses the above data to produce: 
*** www  
index.html //latest posts page, name set in bb-blog.init
archive.html // list in tree form of all posts
**** post //dir set in recipe
- Title of post one.html
- Title of post two.html
- Title of post three.html
**** tag
***** tag-one    
****** 1
index.html // list of paginated teasers
****** 2
index.html // list of paginated teasers

***** tag-two    
**** teaser     
    <mirror of post dir, but abridged posts> 
**** widget //set ini bb-blog-init
- archive.html
- recent.html
- tags.html
**** 2013  //list of teasers
index.html // link to ./1/index.html
***** 1
index.html // list of paginated teasers
***** 2
index.html // list of paginated teasers
***** last
index.html // list of paginated teasers
***** June
index.html link to ./1/index.html
****** 1
index.html // list of paginated teasers
****** last 
index.html // list of paginated teasers
***** October
****** 1
index.html // list of paginated teasers
****** 2
index.html // list of paginated teasers
      
**** 2014 
index.html
***** June
index.html
***** October
index.html

***** 1
index.html // list of paginated teasers
***** 2
index.html // list of paginated teasers


* ---------------------------
* Files to build
** widgets
recent, archive and tag widget

** pages
*** an archive page, just a list in tree form (year/month/title)
*** a tag page, paginated, teasers
links to other pages when more than one page:
previous, next, page number, last, first page
*** a month page, paginated, teasers
links to other pages when more than one page:
next/previous month/year 
previous, next, page number, last, first page
*** a year page, paginated, teasers
links to other pages when more than one page:
next/previous month/year 
previous, next, page number, last, first page  
*** a landing page, paginated, teasers
A list of all posts in reverse chronological order.
links to other pages when more than one page:
previous, next, page number, last, first page 
*** a post page
   add disqus comment script tag to embed comments
   
** json of posts on server
  When set in bb-blog.init, also add list/archive/tag
  //by id=path:
  posts: {   
  '//path/to/file.html': {
  path: '//path/to/file.html'
  teaser: '//path/to/file.teaser.html',
  title: 'some title'
  tags: ["t1", "t2", "t3"],
  published: "12 June 2014"
  created: "some/date"
  author: 'bla foo'
  }
  //Posts in reverse chronological order
  byReverseDate: [ <list of posts paths>]
  //By year/month with posts in chronological order:
  byYearMonth: { 2014: { Jan: [ <list of posts> ]}}
  //by tag with posts in chronological order:
  byTag: { tagOne: [ <list of posts> ]} }
}

* Render site:
  Build all

* Save and delete:
retrieve old version and read tags and publish date and title
if not different ->  finished
else:
rebuild post page
then selectively rebuild:
if post is different: post page
if teaser is different:
rebuild relevant month, year, landing
** same publish date  
*** same title, same tags, 
    Done
*** same title, different tags:  
    tag pages, 
    tag widget
*** different title, same tags:  
    
*** different title, different tags:  
** different publish date  
*** same title, same tags, 
- all widgets, archive page
- relevant month and year pages 
- tag pages 
- post page 
*** same title, different tags:  
*** different title, same tags:  
*** different title, different tags:  


    
* TODO
** filter out unpublished 
   
** some kind of automation, edit the site online, then produce js free version and
push to github.io 
** produce json   
** enable authentication using persona
** style ala current axion5.net   
** search
** proper error reporting:
Letting the user know what happened when something went wrong!!!
   
** add to firstdoor
** setting meta title for browser history and backward/forward buttons
** calculate proper teasers for posts, not just all or nothing if no teaser break is found
  in bb-blog.js/retrieveTeaser 
** create archive page and collapsed archive widget   
** DONE unique posts!!!
Don't overwrite old posts when creating new posts or renaming them
When saving post, check for uniques of 'file' first, if not unique add number
to it, till unique file name is found, then check for uniqueness of slug. If
not unique send back error, and don't save the file!!!
** DONE remove stale html pages in www, 
when renaming old slug.html remain
** DONE add new page
** DONE add date to post   
** DONE add comments
** DONE next/prev/last/first nav links on teaser pages 
** DONE make sure blog with no posts still has a way to add more posts
  Just open edit.html, produced by running bin/build 
   
* DOING
